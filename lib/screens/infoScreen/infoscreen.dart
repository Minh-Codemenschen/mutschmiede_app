// ignore_for_file: non_constant_identifier_names, use_build_context_synchronously, must_be_immutable

import 'package:cached_network_image/cached_network_image.dart';
import 'package:dio/dio.dart' as dio;
import 'package:flutter/material.dart';
import 'package:get/get.dart';
import 'package:intl/date_symbol_data_local.dart';
import 'package:intl/intl.dart';
import 'package:mutschmiede/screens/infoScreen/generateqrcode.dart';
import 'package:mutschmiede/screens/infoScreen/kooperatiospartner/kooperatiosPartner.dart';
import 'package:mutschmiede/utils/Utils.dart';
import 'package:shared_preferences/shared_preferences.dart';
import 'package:url_launcher/url_launcher.dart';

import '../../constants/AppConstants.dart';
import '../../constants/app_text_style.dart';
import '../../constants/colors.dart';
import '../../models/aktuelles.dart';
import '../../network/ApiManager.dart';
import '../../widgets/customlist.dart';
import '../HomeScreen/homescreenclone.dart';
import '../dashboardscreen.dart';
import 'infodeteles.dart';
import 'kooperatiospartner/kooperationpartnerlogolisting.dart';

class InfoScreen extends StatefulWidget {
  InfoScreen(this.urlImage, {super.key});
  String? urlImage;
  String? company_name = "";
  @override
  State<InfoScreen> createState() => _InfoScreenState();
}

class _InfoScreenState extends State<InfoScreen> {
  late HomeScreenClone homeScreenClone;
  bool isCoachesLoaded = false;
  late List<AktuellesModel> autogeneratedList = [];
  bool? textField;
  List<Responsedata>? listresponse;
  @override
  void initState() {
    // TODO: implement initState
    super.initState();
    homeScreenClone = HomeScreenClone(widget.urlImage);
    initializeDateFormatting();
    fetch_CompanyName();
  }

  bool isSelected = false;
  @override
  Widget build(BuildContext context) {
    Size size = MediaQuery.of(context).size;
    return Scaffold(
      appBar: AppBar(
        backgroundColor: Colors.white,
        elevation: 3,
        /*leading: IconButton(
          onPressed: () {
            Navigator.push(
              context,
              MaterialPageRoute(builder: (context) => const UserProfile()),
            );
          },
          icon: Image.asset(
            AppImages.icn_iconuserhome,
          ),
        ),*/
        centerTitle: true,
        title: Image.asset(
          AppImages.icn_Logo,
          fit: BoxFit.cover,
          scale: 1.2,
        ),
        actions: [
          IconButton(
            icon: Icon(
              Icons.logout,
              color: AppColors.primaryColor,
            ),
            onPressed: () {
              Utility.showLogoutDialog(context);
            },
          )
          /*IconButton(
            onPressed: () {
              Navigator.push(
                context,
                MaterialPageRoute(builder: (context) => const NeueAktion()),
              );
            },
            icon: Image.asset(
              AppImages.icn_iconplushome,
            ),
          ),*/
        ],
      ),
      backgroundColor: Colors.grey.shade200,
      body: SingleChildScrollView(
        child: Column(
          children: [
            Stack(
              alignment: Alignment.bottomLeft,
              children: <Widget>[
                Container(
                  margin: const EdgeInsets.all(08),
                  height: size.height * 0.2,
                  width: size.width,
                  decoration: BoxDecoration(
                    color: Colors.white,
                    borderRadius: BorderRadius.circular(10),
                  ),
                  padding: EdgeInsets.all(25),
                  child: SizedBox(
                    child: CachedNetworkImage(
                      imageUrl: widget.urlImage ?? "",
                      errorWidget: (context, url, error) => Container(),
                    ),
                  ),
                ),
                /*if (widget.urlimage != null && widget.urlimage!.isNotEmpty)
                    Padding(
                      padding: EdgeInsets.only(
                          left: size.width * 0.06, bottom: size.width * 0.06),
                      child: Row(
                        crossAxisAlignment: CrossAxisAlignment.center,
                        children: [
                          CachedNetworkImage(
                            height: 35,
                            width: 35,
                            imageUrl: widget.urlimage!,
                            errorWidget: (context, url, error) => Container(),
                          ),
                          const SizedBox(
                            width: 10,
                          ),
                          Text(
                            widget.company_name!,
                            style: AppTextStyle.tabBarTextStyle,
                          ),
                        ],
                      ),
                    ),*/
              ],
            ),
            SizedBox(
              //height: size.height * 0.45,
              child: FutureBuilder<List<Responsedata>?>(
                  future: getAktuellesModel(),
                  builder:
                      (BuildContext context, AsyncSnapshot<dynamic> snapshot) {
                    if (snapshot.hasError) {
                      return const Center(
                        child: Text("Etwas ist schief gelaufen!!"),
                      );
                    } else if (snapshot.connectionState ==
                        ConnectionState.waiting) {
                      return Container(
                          alignment: Alignment.center,
                          margin: EdgeInsets.only(
                              top: size.height * 0.16,
                              bottom: size.height * 0.18),
                          child: const CircularProgressIndicator());
                    }
                    Responsedata? responseData =
                        (snapshot.data as List<Responsedata?>?)![0];
                    return ListView(
                      physics: const NeverScrollableScrollPhysics(),
                      shrinkWrap: true,
                      children: [
                        if ((responseData != null &&
                                responseData.events != null &&
                                responseData.events!.list!.isNotEmpty) ||
                            responseData != null && responseData.menu != null)
                          // &&
                          //       responseData.menu!.isNotEmpty)
                          Container(
                            alignment: Alignment.centerLeft,
                            padding: EdgeInsets.symmetric(
                              horizontal: size.width * 0.03,
                              vertical: 08,
                            ),
                            child:
                                responseData.kooperatiospartner!.isShow == true
                                    ? Text(
                                        'Aktuelles',
                                        style: AppTextStyle.tabBarTextStyle,
                                      )
                                    : const SizedBox(),
                          ),
                        if (responseData != null &&
                            responseData.events != null &&
                            responseData.events!.list!.isNotEmpty)
                          eventList(size, responseData.events!),
                        if (responseData != null && responseData.menu != null)
                          // &&
                          //   responseData.menu.isNotEmpty)
                          menuList(size, responseData.menu!),
                        if (responseData != null &&
                            responseData.kooperatiospartner != null &&
                            responseData.kooperatiospartner!.list!.isNotEmpty)
                          responseData.kooperatiospartner!.isShow == true
                              ? kooperatIosPartner(
                                  size, responseData?.kooperatiospartner)
                              : const SizedBox(),
                        if ((listresponse != null &&
                                listresponse!.length > 0 &&
                                listresponse![0].companyBuilding != null &&
                                listresponse![0]
                                        .companyBuilding!
                                        .location!
                                        .length >
                                    0 &&
                                listresponse![0].companyBuilding!.images !=
                                    null) &&
                            (listresponse != null &&
                                listresponse!.length > 0 &&
                                listresponse![0].companyBuilding != null &&
                                listresponse![0]
                                        .companyBuilding!
                                        .location!
                                        .length >
                                    0 &&
                                listresponse![0].companyBuilding!.location !=
                                    null &&
                                listresponse![0]
                                    .companyBuilding!
                                    .location!
                                    .isNotEmpty))
                          listresponse![0].companyBuilding?.isShow == false
                              ? const SizedBox()
                              : Container(
                                  alignment: Alignment.centerLeft,
                                  padding: EdgeInsets.symmetric(
                                      horizontal: size.width * 0.03,
                                      vertical: 10),
                                  child: Text(
                                    'Unser Firmengebäude',
                                    style: AppTextStyle.tabBarTextStyle,
                                  ),
                                ),
                        //Flexible(child: Container()),
                        if ((listresponse != null &&
                                listresponse!.length > 0 &&
                                listresponse![0].companyBuilding != null &&
                                listresponse![0]
                                        .companyBuilding!
                                        .location!
                                        .length >
                                    0) ||
                            (listresponse != null &&
                                listresponse!.length > 0 &&
                                listresponse![0].companyBuilding != null &&
                                listresponse![0]
                                        .companyBuilding!
                                        .location!
                                        .length >
                                    0 &&
                                listresponse![0].companyBuilding!.location !=
                                    null &&
                                listresponse![0]
                                    .companyBuilding!
                                    .location!
                                    .isNotEmpty))
                          listresponse![0].companyBuilding?.isShow == false
                              ? const SizedBox()
                              : Container(
                                  width: double.infinity,
                                  margin: EdgeInsets.symmetric(
                                      horizontal: size.width * 0.02,
                                      vertical: 08),
                                  decoration: BoxDecoration(
                                    color: Colors.white,
                                    borderRadius: BorderRadius.circular(10),
                                  ),
                                  child: ClipRRect(
                                    /*margin: const EdgeInsets.all(15),
                width: double.infinity,
                decoration: BoxDecoration(
                  color: Colors.white,
                  */ /*image: const DecorationImage(
                    image: AssetImage(
                      AppImages.icn_bginfo,
                    ),
                    fit: BoxFit.cover,
                  ),*/ /*
                  borderRadius: BorderRadius.circular(10),
                ),*/
                                    borderRadius: const BorderRadius.only(
                                        topRight: Radius.circular(10),
                                        topLeft: Radius.circular(10)),
                                    child: Column(
                                      crossAxisAlignment:
                                          CrossAxisAlignment.stretch,
                                      children: [
                                        CachedNetworkImage(
                                          fit: BoxFit.fitWidth,
                                          imageUrl: (listresponse != null &&
                                                  listresponse!.isNotEmpty &&
                                                  listresponse![
                                                              0]
                                                          .companyBuilding !=
                                                      null &&
                                                  listresponse![0]
                                                          .companyBuilding!
                                                          .location!
                                                          .length >
                                                      0 &&
                                                  listresponse![0]
                                                          .companyBuilding!
                                                          .images !=
                                                      null)
                                              ? listresponse![0]
                                                  .companyBuilding!
                                                  .images!
                                              : "",
                                          errorWidget: (context, url, error) =>
                                              Container(),
                                        ),
                                        SizedBox(
                                          height: size.height * 0.008,
                                        ),
                                        GridView.builder(
                                          physics:
                                              const NeverScrollableScrollPhysics(),
                                          shrinkWrap: true,
                                          gridDelegate:
                                              const SliverGridDelegateWithFixedCrossAxisCount(
                                            crossAxisCount: 2,
                                            crossAxisSpacing: 0.3,
                                            childAspectRatio: 6 / 1,
                                          ),
                                          itemCount: (listresponse != null &&
                                                  listresponse!.length > 0 &&
                                                  listresponse![
                                                              0]
                                                          .companyBuilding !=
                                                      null &&
                                                  listresponse![0]
                                                          .companyBuilding!
                                                          .location!
                                                          .length >
                                                      0 &&
                                                  listresponse![0]
                                                          .companyBuilding!
                                                          .location !=
                                                      null &&
                                                  listresponse![0]
                                                      .companyBuilding!
                                                      .location!
                                                      .isNotEmpty)
                                              ? listresponse![0]
                                                  .companyBuilding!
                                                  .location!
                                                  .length
                                              : 0,
                                          itemBuilder: (context, index) {
                                            Location? location =
                                                listresponse![0]
                                                    .companyBuilding!
                                                    .location![index];
                                            return Padding(
                                              padding: EdgeInsets.symmetric(
                                                  horizontal:
                                                      size.width * 0.015),
                                              child: Row(
                                                children: [
                                                  Container(
                                                    height: size.height * 0.026,
                                                    width: size.height * 0.026,
                                                    decoration: BoxDecoration(
                                                      color:
                                                          AppColors.appColors,
                                                      shape: BoxShape.circle,
                                                    ),
                                                    child: Center(
                                                      child: Text(
                                                        (location.order !=
                                                                    null &&
                                                                !(location.order
                                                                    .isBlank!))
                                                            ? location.order!
                                                            : "",
                                                        style: AppTextStyle
                                                            .titleTextStyle
                                                            .copyWith(
                                                                color: AppColor
                                                                    .nearlyWhite,
                                                                fontSize: 12),
                                                      ),
                                                    ),
                                                  ),
                                                  Container(
                                                    child: Padding(
                                                      padding:
                                                          const EdgeInsets.only(
                                                              left: 8.0,
                                                              right: 8),
                                                      child: Text(
                                                        (location.name !=
                                                                    null &&
                                                                !(location.name
                                                                    .isBlank!))
                                                            ? location.name!
                                                            : "",
                                                        maxLines: 2,
                                                        overflow: TextOverflow
                                                            .ellipsis,
                                                        softWrap: false,
                                                        style: const TextStyle(
                                                            fontFamily:
                                                                AppConstants
                                                                    .font_family),
                                                      ),
                                                    ),
                                                    constraints: BoxConstraints(
                                                        maxWidth:
                                                            size.width * 0.35),
                                                  ),
                                                  // ListTile(
                                                  //   leading: Stack(
                                                  //     children: [
                                                  //       Stack(
                                                  //         children: <Widget>[
                                                  //           Container(
                                                  //             margin: const EdgeInsets.all(08),
                                                  //             height: size.height * 0.023,
                                                  //             width: size.width * 0.047,
                                                  //             decoration: BoxDecoration(
                                                  //               color: AppColors.appColors,
                                                  //               borderRadius: BorderRadius.circular(20),
                                                  //             ),
                                                  //           ),
                                                  //           Positioned(
                                                  //             left: 03,
                                                  //             top: size.height * 0.011,
                                                  //             child: Container(
                                                  //                 padding: const EdgeInsets.only(left: 10, right: 20),
                                                  //                 child: Text(
                                                  //                   Unser[index],
                                                  //                   style: AppTextStyle.titleTextStyle
                                                  //                       .copyWith(color: AppColor.nearlyWhite),
                                                  //                 )),
                                                  //           ),
                                                  //         ],
                                                  //       ),
                                                  //     ],
                                                  //   ),
                                                  //   title: Text(Unsertitle[index]),
                                                  // )
                                                ],
                                              ),
                                            );
                                          },
                                        ),
                                        SizedBox(
                                          height: size.height * 0.004,
                                        ),
                                      ],
                                    ),
                                  ),
                                ),
                        if (responseData != null &&
                            responseData.contact != null)
                          contact(size, responseData?.contact),
                        if (responseData != null &&
                            responseData.whistleblower != null &&
                            responseData.whistleblower?.isShow == true)
                          InkWell(
                            onTap: () {
                              responseData.whistleblower?.info?.type ==
                                      "whistleblower"
                                  ? Navigator.push(
                                      context,
                                      MaterialPageRoute(
                                        builder: (context) =>
                                            KooPeTatIosPartner(status: 1),
                                      ))
                                  : null;
                            },
                            child: Padding(
                              padding:
                                  const EdgeInsets.symmetric(horizontal: 06),
                              child: Card(
                                shape: RoundedRectangleBorder(
                                    borderRadius: BorderRadius.circular(10)),
                                child: Column(
                                  mainAxisSize: MainAxisSize.min,
                                  children: [
                                    Row(
                                      crossAxisAlignment:
                                          CrossAxisAlignment.start,
                                      children: [
                                        Container(
                                          margin: const EdgeInsets.only(
                                              top: 8,
                                              left: 8,
                                              right: 4,
                                              bottom: 8),
                                          alignment: Alignment.centerLeft,
                                          height: size.height * 0.12,
                                          width: size.height * 0.12,
                                          child: Container(
                                            decoration: BoxDecoration(
                                              color: AppColors.bgColor,
                                              borderRadius:
                                                  BorderRadius.circular(10),
                                              image: const DecorationImage(
                                                image: AssetImage(
                                                    AppImages.icn_infoicon),
                                                scale: 1,
                                              ),
                                            ),
                                          ),
                                        ),
                                        Expanded(
                                          child: Padding(
                                            padding: const EdgeInsets.only(
                                                right: 5, top: 6, bottom: 6),
                                            child: Column(
                                              children: [
                                                Container(
                                                  alignment: Alignment.topLeft,
                                                  padding:
                                                      const EdgeInsets.only(
                                                          left: 10,
                                                          top: 15,
                                                          right: 25),
                                                  child: Text(
                                                    responseData.whistleblower
                                                            ?.info?.title ??
                                                        ""
                                                            .toString()
                                                            .toUpperCase(),
                                                    style: AppTextStyle
                                                        .tabBarTextStyle
                                                        .copyWith(
                                                            fontSize: 15,
                                                            color: AppColors
                                                                .appColors),
                                                  ),
                                                ),
                                                Container(
                                                  padding:
                                                      const EdgeInsets.only(
                                                          left: 10,
                                                          top: 05,
                                                          right: 15),
                                                  child: Text(
                                                    responseData
                                                            .whistleblower
                                                            ?.info
                                                            ?.description ??
                                                        "".toString(),
                                                    maxLines: 2,
                                                    overflow:
                                                        TextOverflow.ellipsis,
                                                    style: AppTextStyle
                                                        .TextStyleRegularLabelNewsItem,
                                                  ),
                                                ),
                                              ],
                                            ),
                                          ),
                                        ),
                                      ],
                                    ),
                                  ],
                                ),
                              ),
                            ),
                          ),
                        // InkWell(
                        //   onTap: () {
                        //     Navigator.push(
                        //         context,
                        //         MaterialPageRoute(
                        //           builder: (context) =>
                        //               GenerateQrcode(voucherNo: voucherNo),
                        //         ));
                        //   },
                        //   child: Container(
                        //     alignment: Alignment.center,
                        //     padding: const EdgeInsets.symmetric(
                        //         horizontal: 15, vertical: 10),
                        //     margin: const EdgeInsets.all(09),
                        //     decoration: BoxDecoration(
                        //       color: Colors.white,
                        //       borderRadius: BorderRadius.circular(15),
                        //     ),
                        //     child: Row(
                        //       mainAxisAlignment: MainAxisAlignment.spaceBetween,
                        //       children: [
                        //         Text(
                        //           'QR-Code generieren',
                        //           style: AppTextStyle.tabBarTextStyle,
                        //         ),
                        //         Icon(
                        //           Icons.qr_code_2_sharp,
                        //           color: AppColors.appColors,
                        //           size: 32,
                        //         ),
                        //       ],
                        //     ),
                        //   ),
                        // ),
                        const SizedBox(
                          height: 10,
                        )
                      ],
                    );
                  }),
            ),
          ],
        ),
      ),
    );
  }

  Widget contact(Size size, Contact? contact) {
    return Column(
      children: [
        if (contact != null)
          contact.isShow == false
              ? const SizedBox()
              : Container(
                  alignment: Alignment.centerLeft,
                  padding: EdgeInsets.symmetric(
                      horizontal: size.width * 0.04, vertical: 08),
                  child: Text(
                    'Wichtige Ansprechpartner',
                    style: AppTextStyle.tabBarTextStyle,
                  ),
                ),
        if (contact != null)
          contact.isShow == false
              ? const SizedBox()
              : Container(
                  alignment: Alignment.center,
                  padding: const EdgeInsets.all(10),
                  margin: const EdgeInsets.all(09),
                  decoration: BoxDecoration(
                    color: Colors.white,
                    borderRadius: BorderRadius.circular(15),
                  ),
                  child: GridView.builder(
                      shrinkWrap: true,
                      physics: const NeverScrollableScrollPhysics(),
                      gridDelegate:
                          const SliverGridDelegateWithFixedCrossAxisCount(
                              childAspectRatio: 5 / 4.5, crossAxisCount: 2),
                      itemCount: contact.list?.length,
                      itemBuilder: (BuildContext ctx, index) {
                        return infoItem(
                            size,
                            contact.list?[index].contactTitle,
                            contact.list?[index].contactText,
                            contact.list?[index].contactIcon,
                            "");
                      }),
                ),
      ],
    );
  }

  Widget infoItem(
      Size size, String? title, String? txt, String? url, String? type) {
    return Column(children: [
      Container(
        width: size.width * 0.30,
        height: size.width * 0.30,
        decoration: const BoxDecoration(
          shape: BoxShape.circle,
          color: Color(0xFFEFEFEF),
        ),
        child: SizedBox(
          width: size.width * 0.20,
          height: size.width * 0.20,
          child: Image.network(
            url ?? "",
          ),
        ),
      ),
      const SizedBox(
        height: 03,
      ),
      Padding(
        padding: const EdgeInsets.only(left: 05),
        child: Container(
          alignment: Alignment.center,
          child: Text(
            title ?? "",
            style: const TextStyle(
                fontSize: 12, fontFamily: AppConstants.font_family),
          ),
        ),
      ),
      Padding(
        padding: const EdgeInsets.only(left: 05),
        child: Container(
          alignment: Alignment.center,
          child: Text(
            txt ?? "",
            style: const TextStyle(
                fontSize: 12, fontFamily: AppConstants.font_family),
          ),
        ),
      ),
    ]);
  }

  // Widget infoItem(int index, Size size, String text, String? txt) {
  //   return InkWell(
  //     onTap: () async {
  //       try {
  //         launchUrl(Uri.parse("tel:${txt}"));
  //         // ignore: empty_catches
  //       } catch (e) {}
  //     },
  //     child: Column(crossAxisAlignment: CrossAxisAlignment.center, children: [
  //       Container(
  //         width: size.width * 0.30,
  //         height: size.width * 0.30,
  //         decoration: const BoxDecoration(
  //           shape: BoxShape.circle,
  //           color: Color(0xFFEFEFEF),
  //         ),
  //         child: SizedBox(
  //           width: size.width * 0.20,
  //           height: size.width * 0.20,
  //           child: Image.asset(
  //             InfoImages[index],
  //           ),
  //         ),
  //       ),
  //       const SizedBox(
  //         height: 03,
  //       ),
  //       Padding(
  //         padding: const EdgeInsets.only(left: 05),
  //         child: Container(
  //           alignment: Alignment.center,
  //           child: Text(
  //             InfoTitle[index],
  //             style: const TextStyle(
  //                 fontSize: 12, fontFamily: AppConstants.font_family),
  //           ),
  //         ),
  //       ),
  //       Padding(
  //         padding: const EdgeInsets.only(left: 05),
  //         child: Container(
  //           alignment: Alignment.center,
  //           child: Text(
  //             txt ?? "",
  //             style: const TextStyle(
  //                 fontSize: 12, fontFamily: AppConstants.font_family),
  //           ),
  //         ),
  //       ),
  //     ]),
  //   );
  // }

  Widget eventList(Size size, Events? event) {
    return ListView.builder(
      physics: const NeverScrollableScrollPhysics(),
      shrinkWrap: true,
      itemCount: event?.list?.length,
      itemBuilder: (context, index) {
        if (event?.isShow == true) {
          return Column(
            children: [
              InkWell(
                onTap: () async {
                  // setState(() {
                  //   (isSelected = false)
                  //       ? InfoDeteles(
                  //           title: snapshot.data[index].title
                  //               .toString(),
                  //           description: snapshot
                  //               .data[index].description
                  //               .toString(),
                  //           image: snapshot.data[index].icon
                  //               .toString(),
                  //           date: snapshot.data[index].date
                  //               .toString(),
                  //         )
                  //       : Container();
                  // });
                  //String imageurl = await Utility.fetchUserId();
                  if (event?.list?[index]?.title != null &&
                      event?.list?[index]?.title.toString().toLowerCase() ==
                          "Kooperationspartner".toLowerCase()) {
                    /*Navigator.push(
                      context,
                      MaterialPageRoute(
                        builder: (context) =>
                            KooperationPartnerLogos(events.images),
                      ),
                    );*/
                    // Navigator.push(
                    //   context,
                    //   MaterialPageRoute(
                    //     builder: (context) => KooPerationsPartner(),
                    //   ),
                    // );
                  } else {
                    Navigator.push(
                      context,
                      MaterialPageRoute(
                        builder: (context) => InfoDeteles(
                            event?.list?[index]?.title.toString(),
                            event?.list?[index]?.icon.toString(),
                            "",
                            event?.list?[index]?.description.toString(),
                            DashboardScreen.urlImagestatic,
                            listresponse,
                            false),
                      ),
                    );
                  }
                },
                child: Padding(
                  padding: const EdgeInsets.symmetric(horizontal: 06),
                  child: Card(
                    shape: RoundedRectangleBorder(
                      borderRadius: BorderRadius.circular(10),
                    ),
                    child: Column(
                      mainAxisSize: MainAxisSize.min,
                      children: [
                        Row(
                          crossAxisAlignment: CrossAxisAlignment.start,
                          children: [
                            Container(
                              margin: const EdgeInsets.all(08),
                              alignment: Alignment.centerLeft,
                              height: size.height * 0.12,
                              width: size.height * 0.12,
                              child: CachedNetworkImage(
                                imageUrl: event?.list?[index]?.icon ?? "",
                                imageBuilder: (context, imageProvider) =>
                                    Container(
                                  decoration: BoxDecoration(
                                    color: AppColors.bgColor,
                                    borderRadius: BorderRadius.circular(10),
                                    image: DecorationImage(
                                      image: imageProvider,
                                      scale: 1,
                                    ),
                                  ),
                                ),
                              ),
                              /*decoration: BoxDecoration(
                                color: AppColors.bgColor,
                                image: DecorationImage(
                                    image: NetworkImage(
                                        snapshot.data![index].icon.toString()),
                                    scale: 1),
                                borderRadius: BorderRadius.circular(10),
                              ),*/
                            ),
                            Expanded(
                              child: Column(
                                mainAxisAlignment: MainAxisAlignment.start,
                                crossAxisAlignment: CrossAxisAlignment.start,
                                children: [
                                  Container(
                                    alignment: Alignment.topLeft,
                                    padding: const EdgeInsets.only(
                                        left: 10, top: 15, right: 25),
                                    child: Text(
                                      event?.list?[index]?.title
                                              .toString()
                                              .toUpperCase() ??
                                          "",
                                      style: AppTextStyle.tabBarTextStyle
                                          .copyWith(
                                              fontSize: 15,
                                              color: AppColors.appColors),
                                    ),
                                  ),
                                  /*if (snapshot.data![index].title
                                              .toString()
                                              .toLowerCase() ==
                                          AppConstants.LABEL_MENU1
                                              .toLowerCase() ||
                                      snapshot.data![index].title
                                              .toString()
                                              .toLowerCase() ==
                                          AppConstants.LABEL_MENU.toLowerCase())
                                    Container(
                                      padding: const EdgeInsets.only(left: 10),
                                      alignment: Alignment.topLeft,
                                      child: Text(
                                        formatdate(snapshot.data![index].date
                                            .toString()),
                                        maxLines: 1,
                                        style: AppTextStyle
                                            .TextStyleBoldBlackNewsItem,
                                      ),
                                    ),*/
                                  Container(
                                    padding: const EdgeInsets.only(
                                        left: 10, top: 05, right: 15),
                                    child: Text(
                                      event?.list?[index]?.description
                                              .toString() ??
                                          "",
                                      maxLines: 2,
                                      overflow: TextOverflow.ellipsis,
                                      style: AppTextStyle
                                          .TextStyleRegularLabelNewsItem,
                                    ),
                                  )
                                ],
                              ),
                            ),
                          ],
                        ),
                      ],
                    ),
                  ),
                ),
              )
            ],
          );
        } else {
          return Container(
            height: 0,
          );
        }
      },
    );
  }

  Widget menuList(Size size, Menu list) {
    DateFormat dateFormatparse = DateFormat("dd/MM/yyyy");
    DateFormat dateFormatformat = DateFormat("EEEE, dd.MM.yyyy", "de-at");
    return list.isShow == false
        ? const SizedBox()
        : ListView.builder(
            physics: const NeverScrollableScrollPhysics(),
            shrinkWrap: true,
            itemCount: list.menu?.length,
            itemBuilder: (context, index) {
              return InkWell(
                onTap: () {
                  Navigator.push(
                    context,
                    MaterialPageRoute(
                      builder: (context) => InfoDeteles(
                          list.menu?[index].menuFieldName,
                          list.menu?[index].icon.toString(),
                          list.menu?[index].dateTime.toString(),
                          list.menu?[index].menuFieldValue.toString(),
                          DashboardScreen.urlImagestatic,
                          listresponse,
                          true),
                    ),
                  );
                },
                child: Padding(
                  padding: const EdgeInsets.symmetric(horizontal: 06),
                  child: Card(
                    child: Row(
                      children: [
                        Container(
                          margin: const EdgeInsets.only(
                              top: 8, left: 8, right: 4, bottom: 8),
                          alignment: Alignment.centerLeft,
                          height: size.height * 0.12,
                          width: size.height * 0.12,
                          child: CachedNetworkImage(
                            imageUrl: list.menu?[index].icon ?? "",
                            imageBuilder: (context, imageProvider) => Container(
                              decoration: BoxDecoration(
                                color: AppColors.bgColor,
                                borderRadius: BorderRadius.circular(10),
                                image: DecorationImage(
                                  image: imageProvider,
                                  scale: 1,
                                ),
                              ),
                            ),
                          ),
                        ),
                        Padding(
                          padding: const EdgeInsets.fromLTRB(12,0,0,0),
                          child: Column(
                            crossAxisAlignment: CrossAxisAlignment.start,
                            mainAxisAlignment: MainAxisAlignment.start,
                            children: [
                              Text(
                                list.menu?[index].menuFieldName!.toUpperCase() ??
                                    "",
                                style: AppTextStyle.TextStyleBoldLabelNewsItem,
                              ),
                              Text(
                                list.menu?[index].dateTime ?? "",
                                style: AppTextStyle.TextStyleBoldBlackNewsItem,
                              ),
                              Text(
                                list.menu?[index].menuFieldName != null
                                    ? list.menu![index].menuFieldName.toString()
                                    : "",
                                style: AppTextStyle.TextStyleRegularLabelNewsItem,
                              ),

                              const SizedBox(
                                height: 6,
                              ),

                              // CustomList(
                              //   text: list.menu?[index].menuFieldName
                              //           ?.toUpperCase() ??
                              //       AppConstants.LABEL_MENU.toUpperCase(),
                              //   // subtitle: dateFormatformat.format(dateFormatparse
                              //   //     .parse(list.menu?[index].dateTime ?? "")),
                              //   subtitle: list.menu?[index].dateTime ?? "",
                              // ),
                            ],
                          ),
                        )
                      ],
                    ),
                  ),
                ),
              );
            },
          );
  }

  Widget kooperatIosPartner(Size size, Kooperatiospartner? kooperatiospartner) {
    return InkWell(
      onTap: () {
        Navigator.push(
          context,
          MaterialPageRoute(
            builder: (context) => KooPerationsPartner(),
          ),
        );
      },
      child: Padding(
        padding: const EdgeInsets.symmetric(horizontal: 06),
        child: Card(
          shape:
              RoundedRectangleBorder(borderRadius: BorderRadius.circular(10)),
          child: Column(
            mainAxisSize: MainAxisSize.min,
            children: [
              Row(
                crossAxisAlignment: CrossAxisAlignment.start,
                children: [
                  Container(
                    margin: const EdgeInsets.only(
                        top: 8, left: 8, right: 4, bottom: 8),
                    alignment: Alignment.centerLeft,
                    height: size.height * 0.12,
                    width: size.height * 0.12,
                    child: CachedNetworkImage(
                      imageUrl: kooperatiospartner?.info?.icon ?? "",
                      imageBuilder: (context, imageProvider) => Container(
                        decoration: BoxDecoration(
                          color: AppColors.bgColor,
                          borderRadius: BorderRadius.circular(10),
                          image: DecorationImage(
                            image: imageProvider,
                            scale: 1,
                          ),
                        ),
                      ),
                    ),
                    /*decoration: BoxDecoration(
                                color: AppColors.bgColor,
                                image: DecorationImage(
                                    image: NetworkImage(
                                        snapshot.data![index].icon.toString()),
                                    scale: 1),
                                borderRadius: BorderRadius.circular(10),
                              ),*/
                  ),
                  Expanded(
                    child: Padding(
                      padding:
                          const EdgeInsets.only(right: 5, top: 6, bottom: 6),
                      child: Column(
                        children: [
                          Container(
                            alignment: Alignment.topLeft,
                            padding: const EdgeInsets.only(
                                left: 10, top: 15, right: 25),
                            child: Text(
                              kooperatiospartner!.info!.title
                                  .toString()
                                  .toUpperCase(),
                              style: AppTextStyle.tabBarTextStyle.copyWith(
                                  fontSize: 15, color: AppColors.appColors),
                            ),
                          ),
                          Container(
                            padding: const EdgeInsets.only(
                                left: 10, top: 05, right: 15),
                            child: Text(
                              kooperatiospartner!.info!.description.toString(),
                              maxLines: 2,
                              overflow: TextOverflow.ellipsis,
                              style: AppTextStyle.TextStyleRegularLabelNewsItem,
                            ),
                          ),
                        ],
                      ),
                    ),
                  ),
                ],
              ),
            ],
          ),
        ),
      ),
    );
  }

  String? voucherNo;
  void fetch_CompanyName() async {
    SharedPreferences prefs = await SharedPreferences.getInstance();
    widget.company_name = prefs.getString(AppConstants.COMPANY_NAME) ?? "";
    setState(() {});
  }

  Future<List<Responsedata>?> getAktuellesModel() async {
    // EasyLoading.show(
    //   status: 'Please Wait!',
    //   maskType: EasyLoadingMaskType.black,
    // );
    print("getAktuellesModel >>>>>>>>>>>>>>>>>>>>>>>");
    voucherNo = await Utility.fetchUserId();
    dio.Response? res = await ApiManager().aktuelLes(voucherNo!);
    if (res != null && res.data != null) {
      Map map = res.data;
      print("Data >>>>>>>>>>>>>>>>>>>>>");
      print(map);
      if (map['status'] != null && map['status'].toString() == "200") {
        print(map['message']);
        AktuellesModel aktuellesModel =
            AktuellesModel.fromJson(map as Map<String, dynamic>);
        //setSession(map['responsedata']['url_image'],map['responsedata']['company_name'] ,context);
        if (aktuellesModel != null &&
            aktuellesModel.responsedata != null &&
            aktuellesModel.responsedata!.isNotEmpty) {
          listresponse = aktuellesModel.responsedata;
          List<Responsedata>? list = aktuellesModel.responsedata;
          return list;
        } else {
          return [];
        }
      } else {
        return [];
      }
    }
    return [];
  }

  String formatdate(String date) {
    DateFormat dateFormatparse = DateFormat("MMMM dd, yyyy");
    DateFormat dateFormatformat = DateFormat("EEEE, dd.MM.yyyy", "de-at");
    return dateFormatformat.format(dateFormatparse.parse(date));
  }
}
